@import url('https://fonts.googleapis.com/css2?family=Quicksand:wght@300..700&display=swap');
@import 'tailwindcss' source(none); /* <-- ensures no default Tailwind styles are included */

@source "./"; /* <-- specifies the directory that is processed/parsed by Tailwind */

@theme {
  --font-quicksand: 'Quicksand', serif;
  --animate-wavey: wavey 1000ms linear infinite;
  --animation-delay-sm: 100ms;
  --animation-delay-md: 300ms;
  --animation-delay-lg: 500ms;
  --animation-delay-xl: 1000ms;

  @keyframes wavey {
    0%,
    100% {
      transform: scaleY(0.5);
    }
    50% {
      transform: scaleY(1.5);
    }
  }
}

@utility animation-delay-* {
  /* allows the use of CSS variables, i.e. --animation-delay-sm*/
  animation-delay: --value(--animation-delay- *);

  /* New in V4 - allows the use of arbitrary values without the use of brackets, i.e. --animation-delay-200 */
  animation-delay: calc(--value(number) * 1ms);
  /* Note for this trick: the unit can be anything, it can be px, rem, pt etc. In this case we needed it to be ms */

  /* for use of arbitrary values with brackets, i.e. --animation-delay-[650ms] */
  animation-delay: --value([ *]);
}

@layer base {
  body {
    font-family: var(--font-quicksand);
  }
  h1 {
    @apply text-6xl font-bold;
  }
  h2 {
    @apply text-5xl font-bold;
  }
  h3 {
    @apply text-4xl font-bold;
  }
  h4 {
    @apply text-3xl font-bold;
  }
  h5 {
    @apply text-2xl font-bold;
  }
  h6 {
    @apply text-xl font-bold;
  }
}

/* Note: 
 A variant refers to a particular state or condition of an element that can be targeted with specific styles. 
 Custom variants allow you to define your own conditions for applying styles, beyond the default ones provided by Tailwind CSS.
*/

/* Custom variant for group open state. 
 This variant checks if the parent with class 'group' has the 'open' state.
 @slot takes in the style from the selected class.
 i.e. group-open:rotate-45 > rotate-45 is passed to @slot
*/
@custom-variant group-open {
  &:is(:where(.group):is(.open, [open], :popover-open, :open) *) {
    @slot;
  }
}

/* Same as group-open except for peer. Peer selection is facilitated by the tilde (~) combinator. */
@custom-variant peer-open {
  &:is(:where(.peer):is(.open, [open], :popover-open, :open) ~ *) {
    @slot;
  }
}

/*
As per the Tailwind CSS documentation, the dark mode can be implemented in two ways: class-based or media-based.
https://tailwindcss.com/docs/dark-mode#toggling-dark-mode-manually

Dark mode is supported out of the box in Tailwind CSS. By default, it uses the 'media' strategy, 
which applies dark mode styles based on the user's system preferences.
The custom variant below is for class-based dark mode, which applies dark mode styles when a parent element 
(usually the <html> or <body> tag) has the class 'dark'.
*/
@custom-variant dark (&:where(.dark, .dark *));
